d1 <- (log(S/K) + ((sigma^2)/2)*ttm)/(sigma*sqrt(ttm))
d2 <- d1 - sigma*sqrt(ttm)
price <- pnorm(d1)*S - K*pnorm(d2)
return(price)
}
impVol <- function(price, S, K, ttm){
f <- function(sigma){price -BSM(S,K,sigma,ttm)}
imp_vol <- uniroot(f, c(-1,1))
return(imp_vol)
}
S0 <- 435.2
l <- length(data$TimeToExp)
par <- optim(par = c(0.1^2, 0.8, 2.01, 0.1^2, -0.75), lossFunction,
method = "L-BFGS-B", lower = c(0.01, 0.01, 0.1, 0.01, -0.99),
upper = c(0.99, 2, 5, 0.99, 0.99))
warnings()
rm(list = ls())
graphics.off()
library(quantmod)
library(dplyr)
library(plotly)
#First get options data from Yahoo
ticker <- "SPY"
expiration_dates <- c("2023-11-03", "2023-11-06", "2023-11-07", "2023-11-08",
"2023-11-09", "2023-11-10", "2023-11-13", "2023-11-14",
"2023-11-15")
expiration_dates <- c("2023-11-06", "2023-11-07", "2023-11-08",
"2023-11-09", "2023-11-10", "2023-11-13", "2023-11-14",
"2023-11-15")
options_data <- getOptionChain(ticker, Exp = expiration_dates)
options_data_matrix <- NULL
for(i in 1:length(expiration_dates)){
options_data_matrix <- rbind(options_data_matrix, options_data[[i]]$calls)
}
#Set current stock price
S_t <- 435.27
#Set current stock price
S0 <- 434.69
options_data_matrix$log_moneyness <- log(S_t/options_data_matrix$Strike)
options_data_matrix$TimeToExp <- as.numeric(as.Date(options_data_matrix$Expiration) - as.Date(Sys.Date()))/365.25
data <- options_data_matrix
charFunc <- function(u, spot, ttm, v, sigma, kappa, theta, rho){
d <- sqrt( (rho*sigma*u*1i - kappa)^2 + (sigma^2)*(u*1i + u^2) )
d <- -d
g <- (kappa - rho*sigma*u*1i + d)/(kappa - rho*sigma*u*1i - d)
tempM <-
(kappa-rho*sigma*u*1i+d)*ttm - 2*log((1-g*exp(d*ttm))/(1-g))
M <- (kappa*theta)/(sigma^2)*tempM
N <- (kappa-rho*sigma*u*1i + d)/(sigma^2)*((1-exp(d*ttm))/(1-g*exp(d*ttm)))
res <- exp(M+N*v + 1i*u*log(spot))
return(res)
}
HestonCall <- function(spot, strike, ttm, v, sigma, kappa, theta, rho){
integrand1 <- function(u){
num1 <- charFunc(u-1i, spot, ttm, v, sigma, kappa, theta, rho)
den1 <- charFunc(-1i, spot, ttm, v, sigma, kappa, theta, rho)
dummy1 <- exp(-1i*u*log(strike))*num1/(1i*u*den1)
integrand1 <- Re(dummy1)
}
integrand2 <- function(u){
dummy2 <- exp(-1i*u*log(strike))*charFunc(u, spot, ttm, v, sigma,
kappa, theta, rho)/(1i*u)
integrand2 <- Re(dummy2)
}
Pi1 <- 0.5 + 1/pi * integrate(integrand1, 0, 1000, stop.on.error = FALSE)$value
Pi2 <- 0.5 + 1/pi * integrate(integrand2, 0, 1000, stop.on.error = FALSE)$value
res <- spot*Pi1 - strike*Pi2
return(res)
}
lossFunction <- function(parms){
sum <- 0
for(i in 1:l){
sum <- sum + ( (data$Last[i] -
HestonCall(S0, data$Strike[i], data$TimeToExp, parms[1],
parms[2], parms[3], parms[4], parms[5])))^2
}
return(sum)
}
BSM <- function(S, K, sigma, ttm){
d1 <- (log(S/K) + ((sigma^2)/2)*ttm)/(sigma*sqrt(ttm))
d2 <- d1 - sigma*sqrt(ttm)
price <- pnorm(d1)*S - K*pnorm(d2)
return(price)
}
impVol <- function(price, S, K, ttm){
f <- function(sigma){price -BSM(S,K,sigma,ttm)}
imp_vol <- uniroot(f, c(-1,1))
return(imp_vol)
}
S0 <- 435.2
l <- length(data$TimeToExp)
#Set current stock price
S0 <- 434.69
par <- optim(par = c(0.1^2, 0.8, 2.01, 0.1^2, -0.75), lossFunction,
method = "L-BFGS-B", lower = c(0.01, 0.01, 0.1, 0.01, -0.99),
upper = c(0.99, 2, 5, 0.99, 0.99))
# Heston Pricing ----------------------------------------------------------
library(NMOF)
callHestoncf(S=S0, X=data$Strike[1], r = 0.02, q = 0, v0=0.05, vT=0.02, rho = -0.7,k=2.01,sigma=0.02)
callHestoncf(S=S0, X=data$Strike[1], r = 0.02, q = 0, v0=0.05, vT=0.02, rho = -0.7,k=2.01,sigma=0.02)
callHestoncf(S=S0, X=data$Strike[1],tau=data$TimeToExp[1], r = 0.02, q = 0, v0=0.05, vT=0.02, rho = -0.7,k=2.01,sigma=0.02)
HestonCall(spot=0.05, strike = data$Strike[1], ttm = data$TimeToExp, v = 0.02, sigma = 0.02,)
HestonCall(spot=0.05, strike = data$Strike[1], ttm = data$TimeToExp, v = 0.02, sigma = 0.02,)
HestonCall(spot=0.05, strike = data$Strike[1], ttm = data$TimeToExp, v = 0.02, sigma = 0.02,kappa=2.01,rho=-0.7)
HestonCall(spot=0.05, strike = data$Strike[1], ttm = data$TimeToExp, v = 0.02, sigma = 0.02,kappa=2.01,rho=-0.7, theta = 0.02)
lossFunction <- function(parms){
sum <- 0
for(i in 1:l){
sum <- sum + ( (data$Last[i] -
callHestoncf(S0, data$Strike[i], data$TimeToExp, parms[1],
parms[2], parms[3], parms[4], parms[5])))^2
}
return(sum)
}
BSM <- function(S, K, sigma, ttm){
d1 <- (log(S/K) + ((sigma^2)/2)*ttm)/(sigma*sqrt(ttm))
d2 <- d1 - sigma*sqrt(ttm)
price <- pnorm(d1)*S - K*pnorm(d2)
return(price)
}
impVol <- function(price, S, K, ttm){
f <- function(sigma){price -BSM(S,K,sigma,ttm)}
imp_vol <- uniroot(f, c(-1,1))
return(imp_vol)
}
l <- length(data$TimeToExp)
par <- optim(par = c(0.1^2, 0.8, 2.01, 0.1^2, -0.75), lossFunction,
method = "L-BFGS-B", lower = c(0.01, 0.01, 0.1, 0.01, -0.99),
upper = c(0.99, 2, 5, 0.99, 0.99))
lossFunction <- function(parms){
sum <- 0
for(i in 1:l){
sum <- sum + ( (data$Last[i] -
callHestoncf(S0, data$Strike[i], data$TimeToExp, r = 0.02,
q=0, parms[1],
parms[2], parms[3], parms[4], parms[5])))^2
}
return(sum)
}
par <- optim(par = c(0.1^2, 0.8, 2.01, 0.1^2, -0.75), lossFunction,
method = "L-BFGS-B", lower = c(0.01, 0.01, 0.1, 0.01, -0.99),
upper = c(0.99, 2, 5, 0.99, 0.99))
data$TimeToExp
lossFunction <- function(parms){
sum <- 0
for(i in 1:l){
sum <- sum + ( (data$Last[i] -
callHestoncf(S0, data$Strike[i], data$TimeToExp, r = 0.02,
q=0, parms[1],
parms[2], parms[3], parms[4], parms[5])))^2
}
return(sum)
}
BSM <- function(S, K, sigma, ttm){
d1 <- (log(S/K) + ((sigma^2)/2)*ttm)/(sigma*sqrt(ttm))
d2 <- d1 - sigma*sqrt(ttm)
price <- pnorm(d1)*S - K*pnorm(d2)
return(price)
}
impVol <- function(price, S, K, ttm){
f <- function(sigma){price -BSM(S,K,sigma,ttm)}
imp_vol <- uniroot(f, c(-1,1))
return(imp_vol)
}
l <- length(data$TimeToExp)
par <- optim(par = c(0.1^2, 0.8, 2.01, 0.1^2, -0.75), lossFunction,
method = "L-BFGS-B", lower = c(0.01, 0.01, 0.1, 0.01, -0.99),
upper = c(0.99, 2, 5, 0.99, 0.99))
View(callHestoncf())
View(callHestoncf
View(callHestoncf)
Heston_price <- function (S, X, tau, r, q, v0, vT, rho, k, sigma, implVol = FALSE,
...)
{
if (sigma < 0.01)
sigma <- 0.01
P1 <- function(om, S, X, tau, r, q, v0, vT, rho, k, sigma) {
p <- Re(exp(-(0+1i) * log(X) * om) * cfHeston(om - (0+1i),
S, tau, r, q, v0, vT, rho, k, sigma)/((0+1i) * om *
S * exp((r - q) * tau)))
p
}
P2 <- function(om, S, X, tau, r, q, v0, vT, rho, k, sigma) {
p <- Re(exp(-(0+1i) * log(X) * om) * cfHeston(om, S,
tau, r, q, v0, vT, rho, k, sigma)/((0+1i) * om))
p
}
cfHeston <- function(om, S, tau, r, q, v0, vT, rho, k, sigma) {
d <- sqrt((rho * sigma * (0+1i) * om - k)^2 + sigma^2 *
((0+1i) * om + om^2))
g <- (k - rho * sigma * (0+1i) * om - d)/(k - rho *
sigma * (0+1i) * om + d)
cf1 <- (0+1i) * om * (log(S) + (r - q) * tau)
cf2 <- vT * k/(sigma^2) * ((k - rho * sigma * (0+1i) *
om - d) * tau - 2 * log((1 - g * exp(-d * tau))/(1 -
g)))
cf3 <- v0/sigma^2 * (k - rho * sigma * (0+1i) * om -
d) * (1 - exp(-d * tau))/(1 - g * exp(-d * tau))
cf <- exp(cf1 + cf2 + cf3)
cf
}
vP1 <- 0.5 + 1/pi * integrate(P1, lower = 0, upper = Inf,
S, X, tau, r, q, v0, vT, rho, k, sigma, ...)$value
vP2 <- 0.5 + 1/pi * integrate(P2, lower = 0, upper = Inf,
S, X, tau, r, q, v0, vT, rho, k, sigma, ...)$value
result <- exp(-q * tau) * S * vP1 - exp(-r * tau) * X *
vP2
if (implVol) {
diffPrice <- function(vol, call, S, X, tau, r, q) {
d1 <- (log(S/X) + (r - q + vol^2/2) * tau)/(vol *
sqrt(tau))
d2 <- d1 - vol * sqrt(tau)
callBSM <- S * exp(-q * tau) * pnorm(d1) - X * exp(-r *
tau) * pnorm(d2)
call - callBSM
}
impliedVol <- uniroot(diffPrice, interval = c(1e-04,
2), call = result, S = S, X = X, tau = tau, r = r,
q = q)[[1L]]
result <- list(value = result, impliedVol = impliedVol)
}
result
}
?Vectorize
Heston_price <- function (S, X, tau, r, q, v0, vT, rho, k, sigma, implVol = FALSE,
...)
{
if (sigma < 0.01)
sigma <- 0.01
P1 <- function(om, S, X, tau, r, q, v0, vT, rho, k, sigma) {
p <- Re(exp(-(0+1i) * log(X) * om) * cfHeston(om - (0+1i),
S, tau, r, q, v0, vT, rho, k, sigma)/((0+1i) * om *
S * exp((r - q) * tau)))
p
}
P2 <- function(om, S, X, tau, r, q, v0, vT, rho, k, sigma) {
p <- Re(exp(-(0+1i) * log(X) * om) * cfHeston(om, S,
tau, r, q, v0, vT, rho, k, sigma)/((0+1i) * om))
p
}
cfHeston <- function(om, S, tau, r, q, v0, vT, rho, k, sigma) {
d <- sqrt((rho * sigma * (0+1i) * om - k)^2 + sigma^2 *
((0+1i) * om + om^2))
g <- (k - rho * sigma * (0+1i) * om - d)/(k - rho *
sigma * (0+1i) * om + d)
cf1 <- (0+1i) * om * (log(S) + (r - q) * tau)
cf2 <- vT * k/(sigma^2) * ((k - rho * sigma * (0+1i) *
om - d) * tau - 2 * log((1 - g * exp(-d * tau))/(1 -
g)))
cf3 <- v0/sigma^2 * (k - rho * sigma * (0+1i) * om -
d) * (1 - exp(-d * tau))/(1 - g * exp(-d * tau))
cf <- exp(cf1 + cf2 + cf3)
cf
}
vP1 <- 0.5 + 1/pi * integrate(Vectorize(P1), lower = 0, upper = Inf,
S, X, tau, r, q, v0, vT, rho, k, sigma, ...)$value
vP2 <- 0.5 + 1/pi * integrate(Vectorize(P2), lower = 0, upper = Inf,
S, X, tau, r, q, v0, vT, rho, k, sigma, ...)$value
result <- exp(-q * tau) * S * vP1 - exp(-r * tau) * X *
vP2
if (implVol) {
diffPrice <- function(vol, call, S, X, tau, r, q) {
d1 <- (log(S/X) + (r - q + vol^2/2) * tau)/(vol *
sqrt(tau))
d2 <- d1 - vol * sqrt(tau)
callBSM <- S * exp(-q * tau) * pnorm(d1) - X * exp(-r *
tau) * pnorm(d2)
call - callBSM
}
impliedVol <- uniroot(diffPrice, interval = c(1e-04,
2), call = result, S = S, X = X, tau = tau, r = r,
q = q)[[1L]]
result <- list(value = result, impliedVol = impliedVol)
}
result
}
lossFunction <- function(parms){
sum <- 0
for(i in 1:l){
sum <- sum + ( (data$Last[i] -
Heston_price(S0, data$Strike[i], data$TimeToExp, r = 0.02,
q=0, parms[1],
parms[2], parms[3], parms[4], parms[5])))^2
}
return(sum)
}
BSM <- function(S, K, sigma, ttm){
d1 <- (log(S/K) + ((sigma^2)/2)*ttm)/(sigma*sqrt(ttm))
d2 <- d1 - sigma*sqrt(ttm)
price <- pnorm(d1)*S - K*pnorm(d2)
return(price)
}
impVol <- function(price, S, K, ttm){
f <- function(sigma){price -BSM(S,K,sigma,ttm)}
imp_vol <- uniroot(f, c(-1,1))
return(imp_vol)
}
l <- length(data$TimeToExp)
par <- optim(par = c(0.1^2, 0.8, 2.01, 0.1^2, -0.75), lossFunction,
method = "L-BFGS-B", lower = c(0.01, 0.01, 0.1, 0.01, -0.99),
upper = c(0.99, 2, 5, 0.99, 0.99))
vP1 <- 0.5 + 1/pi * integrate(P1 rep(1, 10), lower = 0, upper = Inf,
S, X, tau, r, q, v0, vT, rho, k, sigma, ...)$value
Heston_price <- function (S, X, tau, r, q, v0, vT, rho, k, sigma, implVol = FALSE,
...)
{
if (sigma < 0.01)
sigma <- 0.01
P1 <- function(om, S, X, tau, r, q, v0, vT, rho, k, sigma) {
p <- Re(exp(-(0+1i) * log(X) * om) * cfHeston(om - (0+1i),
S, tau, r, q, v0, vT, rho, k, sigma)/((0+1i) * om *
S * exp((r - q) * tau)))
p
}
P2 <- function(om, S, X, tau, r, q, v0, vT, rho, k, sigma) {
p <- Re(exp(-(0+1i) * log(X) * om) * cfHeston(om, S,
tau, r, q, v0, vT, rho, k, sigma)/((0+1i) * om))
p
}
cfHeston <- function(om, S, tau, r, q, v0, vT, rho, k, sigma) {
d <- sqrt((rho * sigma * (0+1i) * om - k)^2 + sigma^2 *
((0+1i) * om + om^2))
g <- (k - rho * sigma * (0+1i) * om - d)/(k - rho *
sigma * (0+1i) * om + d)
cf1 <- (0+1i) * om * (log(S) + (r - q) * tau)
cf2 <- vT * k/(sigma^2) * ((k - rho * sigma * (0+1i) *
om - d) * tau - 2 * log((1 - g * exp(-d * tau))/(1 -
g)))
cf3 <- v0/sigma^2 * (k - rho * sigma * (0+1i) * om -
d) * (1 - exp(-d * tau))/(1 - g * exp(-d * tau))
cf <- exp(cf1 + cf2 + cf3)
cf
}
vP1 <- 0.5 + 1/pi * integrate(P1 rep(1, 10), lower = 0, upper = Inf,
S, X, tau, r, q, v0, vT, rho, k, sigma, ...)$value
vP2 <- 0.5 + 1/pi * integrate(P2 rep(1, 10), lower = 0, upper = Inf,
S, X, tau, r, q, v0, vT, rho, k, sigma, ...)$value
result <- exp(-q * tau) * S * vP1 - exp(-r * tau) * X *
vP2
if (implVol) {
diffPrice <- function(vol, call, S, X, tau, r, q) {
d1 <- (log(S/X) + (r - q + vol^2/2) * tau)/(vol *
sqrt(tau))
d2 <- d1 - vol * sqrt(tau)
callBSM <- S * exp(-q * tau) * pnorm(d1) - X * exp(-r *
tau) * pnorm(d2)
call - callBSM
}
impliedVol <- uniroot(diffPrice, interval = c(1e-04,
2), call = result, S = S, X = X, tau = tau, r = r,
q = q)[[1L]]
result <- list(value = result, impliedVol = impliedVol)
}
result
}
HestonCall <- function(spot, strike, ttm, v, sigma, kappa, theta, rho){
integrand1 <- function(u){
num1 <- charFunc(u-1i, spot, ttm, v, sigma, kappa, theta, rho)
den1 <- charFunc(-1i, spot, ttm, v, sigma, kappa, theta, rho)
dummy1 <- exp(-1i*u*log(strike))*num1/(1i*u*den1)
integrand1 <- Re(dummy1)
}
integrand2 <- function(u){
dummy2 <- exp(-1i*u*log(strike))*charFunc(u, spot, ttm, v, sigma,
kappa, theta, rho)/(1i*u)
integrand2 <- Re(dummy2)
}
Pi1 <- 0.5 + 1/pi * integrate(integrand1, 0, 1000, stop.on.error = FALSE)$value
Pi2 <- 0.5 + 1/pi * integrate(integrand2, 0, 1000, stop.on.error = FALSE)$value
res <- spot*Pi1 - strike*Pi2
return(res)
}
lossFunction <- function(parms){
sum <- 0
for(i in 1:l){
sum <- sum + ( (data$Last[i] -
Heston_price(S0, data$Strike[i], data$TimeToExp, r = 0.02,
q=0, parms[1],
parms[2], parms[3], parms[4], parms[5])))^2
}
return(sum)
}
BSM <- function(S, K, sigma, ttm){
d1 <- (log(S/K) + ((sigma^2)/2)*ttm)/(sigma*sqrt(ttm))
d2 <- d1 - sigma*sqrt(ttm)
price <- pnorm(d1)*S - K*pnorm(d2)
return(price)
}
impVol <- function(price, S, K, ttm){
f <- function(sigma){price -BSM(S,K,sigma,ttm)}
imp_vol <- uniroot(f, c(-1,1))
return(imp_vol)
}
l <- length(data$TimeToExp)
par <- optim(par = c(0.1^2, 0.8, 2.01, 0.1^2, -0.75), lossFunction,
method = "L-BFGS-B", lower = c(0.01, 0.01, 0.1, 0.01, -0.99),
upper = c(0.99, 2, 5, 0.99, 0.99))
# Heston Pricing ----------------------------------------------------------
library(NMOF)
data
target <- data$Last[1]
x <- c(v0,vT,rho,k,sig)
optim_func <- function(x){
v0= x[1]
vT= x[2]
rho= x[3]
k= x[4]
sig= x[5]
mse <- (callHestoncf(S0,data$Strike[1],data$TimeToExp, 0.0013,0.0106, v0, vT, rho,k,sig)-target)^2
return(mse)
}
optim(x, optim_func)
x <- c(v0,vT,rho,k,sig)
optim_func <- function(x){
v0= x[1]
vT= x[2]
rho= x[3]
k= x[4]
sig= x[5]
mse <- (callHestoncf(S0,data$Strike[1],data$TimeToExp, 0.0013,0.0106, v0, vT, rho,k,sig)-target)^2
return(mse)
}
x <- c(v0,vT,rho,k,sig)
v0 = 0.2
vT = 0.2
rho= 0.5
k= 0.2
sig= 0.05
x <- c(v0,vT,rho,k,sig)
optim_func <- function(x){
v0= x[1]
vT= x[2]
rho= x[3]
k= x[4]
sig= x[5]
mse <- (callHestoncf(S0,data$Strike[1],data$TimeToExp, 0.0013,0.0106, v0, vT, rho,k,sig)-target)^2
return(mse)
}
optim(x, optim_func)
BSM(100, 110, 0.05, 1)
BSM(100, 110, 0.05, 3)
BSM(100, 110, 0.05, 5)
rm(list = ls())
graphics.off()
library(quantmod)
library(dplyr)
library(plotly)
#First get options data from Yahoo
ticker <- "SPY"
expiration_dates <- c("2023-11-07", "2023-11-08", "2023-11-09",
"2023-11-10", "2023-11-13", "2023-11-14", "2023-11-15",
"2023-11-16", "2023-11-17", "2023-11-24", "2023-12-01",
"2023-12-08", "2023-12-15", "2023-12-22","2023-12-29",
"2024-01-19", "2024-02-16", "2024-03-15", "2024-03-28",
"2024-06-21", "2024-06-28", "2024-09-20", "2024-09-30",
"2024-12-20", "2025-01-17", "2025-03-21")
options_data <- getOptionChain(ticker, Exp = expiration_dates)
#First get options data from Yahoo
ticker <- "AAPL"
expiration_dates <- c("2023-11-08", "2023-11-09", "2023-11-10", "2023-11-13", "2023-11-14", "2023-11-15",
"2023-11-16", "2023-11-17", "2023-11-24", "2023-12-01",
"2023-12-08", "2023-12-15", "2023-12-22","2023-12-29",
"2024-01-19", "2024-02-16", "2024-03-15", "2024-03-28")
options_data <- getOptionChain(ticker, Exp = expiration_dates)
#First get options data from Yahoo
ticker <- "SPY"
expiration_dates <- c("2023-11-08", "2023-11-09", "2023-11-10", "2023-11-13", "2023-11-14", "2023-11-15",
"2023-11-16", "2023-11-17", "2023-11-24", "2023-12-01",
"2023-12-08", "2023-12-15", "2023-12-22","2023-12-29",
"2024-01-19", "2024-02-16", "2024-03-15", "2024-03-28")
options_data <- getOptionChain(ticker, Exp = expiration_dates)
rm(list = ls())
graphics.off()
library(quantmod)
library(dplyr)
library(plotly)
#First get options data from Yahoo
ticker <- "SPY"
expiration_dates <- c("2023-11-08", "2023-11-09", "2023-11-10", "2023-11-13", "2023-11-14", "2023-11-15",
"2023-11-16", "2023-11-17", "2023-11-24", "2023-12-01",
"2023-12-08", "2023-12-15", "2023-12-22","2023-12-29",
"2024-01-19", "2024-02-16", "2024-03-15", "2024-03-28")
options_data <- getOptionChain(ticker, Exp = expiration_dates)
options_data_matrix <- NULL
rm(list = ls())
graphics.off()
library(quantmod)
library(dplyr)
library(plotly)
#First get options data from Yahoo
ticker <- "SPY"
expiration_dates <- c("2023-11-09", "2023-11-10", "2023-11-13", "2023-11-14", "2023-11-15",
"2023-11-16", "2023-11-17", "2023-11-24", "2023-12-01",
"2023-12-08", "2023-12-15", "2023-12-22","2023-12-29",
"2024-01-19", "2024-02-16", "2024-03-15", "2024-03-28")
options_data <- getOptionChain(ticker, Exp = expiration_dates)
options_data <- getOptionChain(ticker, Exp = expiration_dates)
options_data_matrix <- NULL
for(i in 1:length(expiration_dates)){
options_data_matrix <- rbind(options_data_matrix, options_data[[i]]$calls)
}
#Set current stock price
S0 <- 437.25
options_data_matrix$log_moneyness <- log(S0/options_data_matrix$Strike)
options_data_matrix$TimeToExp <- as.numeric(as.Date(options_data_matrix$Expiration) - as.Date(Sys.Date()))/365.25
setwd("C:\\Users\\cbjkr\\OneDrive - Aalborg Universitet\\Aalborg Universitet\\Kandidat\\P9-Projekt\\Data")
getwd()
write.csv(options_data_matrix, "C:\\Users\\cbjkr\\OneDrive - Aalborg Universitet\\Aalborg Universitet\\Kandidat\\P9-Projekt\\Data")
setwd("C:\Users\cbjkr\OneDrive\Skrivebord")
getwd()
write.csv(options_data_matrix, "C:\Users\cbjkr\OneDrive\Skrivebord")
write.csv(options_data_matrix, "C:\\Users\\cbjkr\\OneDrive\\Skrivebord")
