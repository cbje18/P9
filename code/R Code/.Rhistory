library(rumidas)
library(dplyr)
library(ggplot2)
library(latex2exp)
library("RTAQ")
library("dccmidas")
library("rumidas")
library(dplyr)
library(ggplot2)
library(latex2exp)
data(rv5)
plot(rv5)
autoplot(rv5) + ylab("Realized Variance") + xlab(NULL)
autoplot(sqrt(rv5)) + ylab("Realized Volatility") + xlab(NULL)
#Define the q's as in "Volatility is Rough"
q <- c(0.5, 1, 1.5, 2, 3)
Delta <- c(1:30)
data <- matrix(0, nrow=length(Delta), ncol = length(q))
#Compute m for every q and every Delta
for(j in 1:length(q)){
for(i in 1:length(Delta)){
data(rv5)
rv5
log_vol <- log(sqrt(rv5$rv5)) %>% as.list()
log_vol <- diff(log_vol$rv5, lag = Delta[i])
log_vol <- log_vol[-(1:Delta[i])]
m <- (1/length(log_vol))*sum(abs(log_vol)^q[j])
m <- log(m)
data[i,j] <- m
}
}
data <- as.data.frame(data)
colnames(data) <- c("q = 0.5", "q = 1", "q = 1.5", "q = 2", "q = 3")
#Fit linear models to the computed data
linear_models <- matrix(data = 0, nrow=2, ncol = length(q))
for(i in 1:length(q)){
glm <- lm(data[,i]~log(Delta))
linear_models[,i] <- glm$coefficients
}
linear_models
#Plot data points along with straight lines
ggplot(data=data) + geom_point(aes(x=log(Delta), y=data[,1],color="q=0.5")) +
geom_abline(aes(intercept=linear_models[1,1], slope = linear_models[2,1],color="q=0.5")) +
geom_point(aes(x=log(Delta), y=data[,2],color = "q=1")) +
geom_abline(aes(intercept=linear_models[1,2], slope = linear_models[2,2], color = "q=1")) +
geom_point(aes(x=log(Delta), y=data[,3],color = "q=1.5")) +
geom_abline(aes(intercept=linear_models[1,3], slope = linear_models[2,3], color = "q=1.5")) +
geom_point(aes(x=log(Delta), y=data[,4],color = "q=2")) +
geom_abline(aes(intercept=linear_models[1,4], slope = linear_models[2,4],color = "q=2")) +
geom_point(aes(x=log(Delta), y=data[,5],color = "q=3")) +
geom_abline(aes(intercept=linear_models[1,5], slope = linear_models[2,5], color="q=3")) +
xlab(TeX("\\log(\\Delta)")) + ylab(TeX("\\log(m(q,\\Delta))")) +
scale_color_manual(breaks =c("q=0.5","q=1","q=1.5","q=2","q=3"),
values = c("q=0.5"= "green", "q=1"="darkgreen",
"q=1.5"="cornflowerblue", "q=2"="cyan", "q=3"="darkblue"))
#The estimated H values
H <- linear_models[2,]/q; H
H_hat <- mean(H)
# Histograms of increments  -----------------------------------------------
#Histogram for Delta = 1
log_vol <- NULL
delta <- 1
data(rv5)
rv5
log_vol <- log(sqrt(rv5$rv5)) %>% as.list()
log_vol <- diff(log_vol$rv5, lag = delta)
log_vol <- log_vol[-(1:delta)]
log_vol <- log_vol %>% as.data.frame()
hist(log_vol$rv5, breaks = 40, prob = TRUE, main = TeX("\\Delta = 1"), xlab = "", ylab = "")
m <- mean(log_vol$rv5)
s <- sd(log_vol$rv5)
curve(dnorm(x, mean = m, sd = s), add = TRUE, col = "red", lwd = 1.5)
#Histogram for Delta = 5
log_vol <- NULL
delta <- 5
data(rv5)
rv5
log_vol <- log(sqrt(rv5$rv5)) %>% as.list()
log_vol <- diff(log_vol$rv5, lag = delta)
log_vol <- log_vol[-(1:delta)]
log_vol <- log_vol %>% as.data.frame()
hist(log_vol$rv5, breaks = 40, prob = TRUE, main = TeX("\\Delta = 5"), xlab = "", ylab = "")
m <- mean(log_vol$rv5)
s <- sd(log_vol$rv5)
curve(dnorm(x, mean = m, sd = s), add = TRUE, col = "red", lwd = 1.5)
#Histogram for Delta = 25
log_vol <- NULL
delta <- 25
data(rv5)
rv5
log_vol <- log(sqrt(rv5$rv5)) %>% as.list()
log_vol <- diff(log_vol$rv5, lag = delta)
log_vol <- log_vol[-(1:delta)]
log_vol <- log_vol %>% as.data.frame()
hist(log_vol$rv5, breaks = 40, prob = TRUE, main = TeX("\\Delta = 25"), xlab = "", ylab = "")
m <- mean(log_vol$rv5)
s <- sd(log_vol$rv5)
curve(dnorm(x, mean = m, sd = s), add = TRUE, col = "red", lwd = 1.5)
#Histogram for Delta = 125
log_vol <- NULL
delta <- 125
data(rv5)
rv5
log_vol <- log(sqrt(rv5$rv5)) %>% as.list()
log_vol <- diff(log_vol$rv5, lag = delta)
log_vol <- log_vol[-(1:delta)]
log_vol <- log_vol %>% as.data.frame()
hist(log_vol$rv5, breaks = 40, prob = TRUE, main = TeX("\\Delta = 125"), xlab = "", ylab = "")
m <- mean(log_vol$rv5)
s <- sd(log_vol$rv5)
curve(dnorm(x, mean = m, sd = s), add = TRUE, col = "red", lwd = 1.5)
# Parameter Estimation for Fractional Ornstein-Uhlenbeck ------------------
rm(list = ls())
data(rv5)
log_process <- log(sqrt(rv5$rv5)) %>% as.data.frame()
plot(log_process$rv5, type = "l")
#Simulate Fractional Ornstein-Uhlenbeck by Euler Scheme
sim_fOU_euler <- function(T, N, lambda, H, phi, theta, Y0){
delta <- T/N
t_grid <- seq(0, T, delta)
W <- simfBM_fft(m = 1, T = T, H = H, N = N+1)
dW <- diff(W, lag = 1)
Y <- numeric(N+1)
Y[1] <- Y0
for(i in 2:(N+1)){
Y[i] <- Y[i-1] - lambda*(Y[i-1] - theta)*delta + phi*dW[i]
}
return(Y)
}
